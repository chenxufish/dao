package org.spat.dao.sql;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.spat.dao.Database;
import org.spat.dao.util.JdbcUitl;





/**
 * 用于处理和执行SQL语句
 * 
 * @author renjun
 *
 */
public class SqlHelper {
	private static Logger logger = LoggerFactory.getLogger(SqlHelper.class);
	private Database database;
	
	public static SqlHelper get(String sql,Database database){
		return new SqlHelper(sql,database);
	}
	
	private SqlHelper(String sql,Database database){
		this.sql = sql;
		this.database = database;
	}
	
	private Connection getConnection() throws Exception {
		Connection connection = database.getConnectionPool().Get();                             
		if (connection == null)
			throw new Exception("can't get a connection.");
		return connection;
	}
	private void releaseConn(Connection conn){
		database.getConnectionPool().Release(conn);
	}
	/**
	 * 超时为5秒
	 */
	public static int TIME_OUT = 5;
	
	/**
	 * 执行的sql语句
	 */
	final String sql;
	
	/**
	 * 保存的参数
	 */
	List<Object> params = new ArrayList<Object>();
	
	/**
	 * 处理Batch
	 */
	List<List<Object>> batch = new ArrayList<List<Object>>();
	

	
	/**
	 * 增加参数
	 * @param value
	 * @return
	 */
	public SqlHelper addParam(Object value){
		params.add(value);
		return this;
	}
	
	public SqlHelper addBatch(){
		batch.add(params);
		params = new ArrayList<Object>();
		return this;
	}
	
    /**
     * Executes the SQL query in this <code>PreparedStatement</code> object
     * and returns the <code>ResultSet</code> object generated by the query.
     *
     * @return a <code>ResultSet</code> object that contains the data produced by the
     *         query; never <code>null</code>
     * @throws Exception 
     */
	public Object executeQuery(IRowCallbackHandler handler) throws Exception{
		Connection connection = null;
		PreparedStatement state = null;
		ResultSet rs = null;
		try {
			connection = getConnection();
			state = prepareStatement(connection);
			rs = state.executeQuery();
			return handler.DataRowHandle(rs);
		}catch (Exception e) {
			logger.error("execQuery error sql:" + sql, e);
			throw e;
		}
		finally{
			JdbcUitl.closeResultSet(rs);
			JdbcUitl.closeStatement(state);
			releaseConn(connection);
		}
		
	}
	
    /**
     * Executes the SQL statement in this <code>PreparedStatement</code> object,
     * which must be an SQL Data Manipulation Language (DML) statement, such as <code>INSERT</code>, <code>UPDATE</code> or
     * <code>DELETE</code>; or an SQL statement that returns nothing, 
     * such as a DDL statement.
     *
     * @return either (1) the row count for SQL Data Manipulation Language (DML) statements
     *         or (2) 0 for SQL statements that return nothing
     * @throws Exception 
     */
	public int executeUpdate() throws Exception {
		Connection connection = null;
		PreparedStatement state = null;
		ResultSet rs = null;
		try {
			connection = getConnection();
			state = prepareStatement(connection);
			return state.executeUpdate();

		}catch (Exception e) {
			logger.error("execQuery error sql:" + sql, e);
			throw e;
		}
		finally{
			JdbcUitl.closeResultSet(rs);
			JdbcUitl.closeStatement(state);
			releaseConn(connection);
		}
	}
	
	public Object executeInsert(IRowCallbackHandler handler) throws Exception {
		Connection connection = null;
		PreparedStatement state = null;
		ResultSet rs = null;
		try {
			connection = getConnection();
			state = prepareStatement(connection, true);
			state.executeUpdate();
			rs = state.getGeneratedKeys();
			return handler.DataRowHandle(rs);
		}catch (Exception e) {
			logger.error("execQuery error sql:" + sql, e);
			throw e;
		}
		finally{
			JdbcUitl.closeResultSet(rs);
			JdbcUitl.closeStatement(state);
			releaseConn(connection);
		}
	}
	
	public boolean execute() throws Exception{
		Connection connection = null;
		PreparedStatement state = null;
		ResultSet rs = null;
		try {
			connection = getConnection();
			state = prepareStatement(connection);
			return state.execute();

		}catch (Exception e) {
			logger.error("execQuery error sql:" + sql, e);
			throw e;
		}
		finally{
			JdbcUitl.closeResultSet(rs);
			JdbcUitl.closeStatement(state);
			releaseConn(connection);
		}
	}
	
	public int[] executeBatch() throws Exception {
		Connection connection = null;
		PreparedStatement state = null;
		ResultSet rs = null;
		try {
			connection = getConnection();
			state = connection.prepareStatement(sql);
			state.setQueryTimeout(TIME_OUT);
			
			for(List<Object> ps : this.batch){
				int parameterIndex = 1;
				for(Object param : ps){
					logger.debug("param:" + param);
					state.setObject(parameterIndex ++, param);
				}
				logger.debug("addBatch");
				state.addBatch();
			}
			
			
			return state.executeBatch();

		}catch (Exception e) {
			logger.error("execQuery error sql:" + sql, e);
			throw e;
		}
		finally{
			JdbcUitl.closeResultSet(rs);
			JdbcUitl.closeStatement(state);
			releaseConn(connection);
		}		
	}

	
	/**
	 * 处理语句
	 * @param connection
	 * @return
	 * @throws SQLException
	 */
	private PreparedStatement prepareStatement(Connection connection) throws SQLException {
		return prepareStatement(connection, false);
	}
	
	
	private PreparedStatement prepareStatement(Connection connection, boolean isGeneratedKeys) throws SQLException {
		logger.debug("begin execute: " + sql);
		PreparedStatement state = isGeneratedKeys ? 
				 connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)
				: connection.prepareStatement(sql);
		state.setQueryTimeout(TIME_OUT);
		
		setParam(state);
		
		return state;
	}
	
	/**
	 * 处理参数
	 * @param state
	 * @throws SQLException
	 */
	private void setParam(PreparedStatement state) throws SQLException{
		int parameterIndex = 1;
		for(Object param : params){
			logger.debug("param:" + param);
			state.setObject(parameterIndex ++, param);
		}
	}

}
